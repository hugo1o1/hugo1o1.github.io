import{_ as n,c as s,o as a,a as t}from"./app.b6b7faa3.js";const g='{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"algo/isExpressionValid.md","lastUpdated":1645368770000}',p={},o=t(`<p>//\u7B97\u6CD5\u9898\uFF1A\u8F93\u5165\u4E00\u4E2A\u56DB\u5219\u8FD0\u7B97\u8868\u8FBE\u5F0F\u5B57\u7B26\u4E32\uFF0C\u4EC5\u5305\u62EC ( ) + - * / \u548C\u6570\u5B57\uFF0C\u8BF7\u5224\u65AD\u8FD9\u4E2A\u8868\u8FBE\u5F0F\u662F\u5426\u6709\u6548</p><p>//\u6837\u4F8B\u8F93\u5165\uFF1A //(1+2)* 3 True //(1+(2-3/4))-5 True //(1+)/2 False</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> inBracket <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\(([^()]*)\\)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> expValid <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d[+-/*]\\d$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token comment">// \u6709\u62EC\u53F7</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>inBracket<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>expValid<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">)</span><span class="token punctuation">)</span> str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>inBracket<span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>expValid<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> cases <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;3+(2+2)&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cases<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>isValid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// console.log(expValid.test(&#39;3+0&#39;));</span>
<span class="token comment">// console.log(expValid.test(&#39;3+0&#39;));</span>
</code></pre></div>`,3),e=[o];function c(l,u,k,i,r,d){return a(),s("div",null,e)}var x=n(p,[["render",c]]);export{g as __pageData,x as default};
